// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surname       String?
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(SUPER_ADMIN)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CompetitorStatus {
  ACTIVE
  ARCHIVED
}

model Competitor {
  id         Int              @id @default(autoincrement())
  nickname   String
  name       String
  surname    String
  status     CompetitorStatus @default(ACTIVE)
  image      String?
  imageSmall String?
  country    String?
  birthDate  DateTime?
  archivedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  matches    MatchesOnCompetitors[]
  wonMatches Match[]                @relation("WinnerToMatch")
  games      Game[]                 @relation("WinnerToGame")
  ufcStats   UfcCompetitorStats[]   @relation("CompetitorToUfcStats")
}

enum Discipline {
  UFC
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Tournament {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  disciplineId Discipline       @default(UFC)
  status       TournamentStatus @default(UPCOMING)
  startedAt    DateTime
  endedAt      DateTime?
  deletedAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt @db.DateTime()

  matches            Match[]              @relation("TournamentToMatch")
  ufcCompetitorStats UfcCompetitorStats[] @relation("TournamentToUfcStats")

  @@index([disciplineId])
}

enum MatchStatus {
  ONGOING
  UPCOMING
  FINISHED
  CANCELED
}

enum MatchFormat {
  BO1
}

model Match {
  id            Int                    @id @default(autoincrement())
  status        MatchStatus            @default(UPCOMING)
  tournamentId  Int
  winnerId      Int?
  competitors   MatchesOnCompetitors[]
  format        MatchFormat            @default(BO1)
  streamChannel String                 @default("1")
  startedAt     DateTime
  endedAt       DateTime?
  deletedAt     DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt @db.DateTime()

  tournament Tournament  @relation("TournamentToMatch", fields: [tournamentId], references: [id], onDelete: Cascade)
  winner     Competitor? @relation("WinnerToMatch", fields: [winnerId], references: [id])
  games      Game[]      @relation("MatchToGame")

  @@index([winnerId])
  @@index([tournamentId])
  @@index([status])
}

enum GameStatus {
  ONGOING
  UPCOMING
  FINISHED
  CANCELED
}

model Game {
  id             Int        @id @default(autoincrement())
  matchId        Int
  winnerId       Int?
  status         GameStatus @default(UPCOMING)
  liveStatistics Json?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt @db.DateTime()
  deletedAt      DateTime?
  startedAt      DateTime?
  endedAt        DateTime?

  match            Match              @relation("MatchToGame", fields: [matchId], references: [id], onDelete: Cascade)
  winner           Competitor?        @relation("WinnerToGame", fields: [winnerId], references: [id])
  ufcResultDetails UfcResultDetails[] @relation("GameToUfcResultDetails")

  @@index([matchId])
  @@index([winnerId])
}

// GameDetails?

enum UfcEndMethods {
  KO
  SUB
  DEC
  SPLIT_DEC
}

model UfcResultDetails {
  id        Int           @id @default(autoincrement())
  gameId    Int           @unique
  endMethod UfcEndMethods @default(DEC)
  round     Int
  endTime   String
  isDraw    Boolean       @default(false)
  game      Game?         @relation("GameToUfcResultDetails", fields: [gameId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())

  @@index([gameId])
}

model UfcCompetitorStats {
  id              Int       @id @default(autoincrement())
  competitorId    Int
  tournamentId    Int?
  games           Int       @default(0)
  knockouts       Int       @default(0)
  wins            Int       @default(0)
  losses          Int       @default(0)
  decisions       Int       @default(0)
  splitDecisions  Int       @default(0)
  submissions     Int       @default(0)
  draws           Int       @default(0)
  periodStartedAt DateTime  @default(now())
  updatedAt       DateTime? @updatedAt @db.DateTime()

  tournament Tournament? @relation("TournamentToUfcStats", fields: [tournamentId], references: [id], onDelete: Cascade)
  competitor Competitor? @relation("CompetitorToUfcStats", fields: [competitorId], references: [id], onDelete: Cascade)

  @@unique([competitorId, periodStartedAt], name: "competitorId_periodStartedAt")
  @@index([competitorId])
  @@index([tournamentId])
}

model MatchesOnCompetitors {
  match        Match      @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId      Int
  competitor   Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  competitorId Int
  score        Int        @default(0)
  order        Int        @default(1)
  updatedAt    DateTime?  @updatedAt @db.DateTime()

  @@id([matchId, competitorId])
  @@index([competitorId])
  @@index([matchId])
  @@map("matches_competitors")
}

model Data {
  id        Int      @id @default(autoincrement())
  uniqueId  String   @unique
  json      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @db.DateTime()
}
