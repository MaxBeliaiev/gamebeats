// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surname       String?
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(SUPER_ADMIN)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CompetitorStatus {
  ACTIVE
  ARCHIVED
}

model Competitor {
  id          Int                    @id @default(autoincrement())
  nickname    String
  name        String
  surname     String
  status      CompetitorStatus       @default(ACTIVE)
  image       String?
  country     String?
  birthDate   DateTime?
  archivedAt  DateTime?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  matches     MatchesOnCompetitors[]
  gameWins    GameResult[]           @relation("WinnerToGameResult")
  gameLosses  GameResult[]           @relation("LoserToGameResult")
  results     GameResult[]
  matchWins   MatchResult[]          @relation("WinnerToMatchResult")
  matchLosses MatchResult[]          @relation("LoserToMatchResult")
}

model Discipline {
  id          Int          @id @default(autoincrement())
  name        String       @map("discipline_name")
  tournaments Tournament[] @relation("DisciplineToTournament")
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Tournament {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  disciplineId Int              @unique
  discipline   Discipline       @relation("DisciplineToTournament", fields: [disciplineId], references: [id])
  matches      Match[]          @relation("TournamentToMatch")
  status       TournamentStatus @default(UPCOMING)
  startedAt    DateTime
  endedAt      DateTime?
  deletedAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt @db.DateTime()

  @@index([disciplineId])
}

enum MatchStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Match {
  id           Int                    @id @default(autoincrement())
  status       MatchStatus            @default(UPCOMING)
  tournamentId Int
  tournament   Tournament             @relation("TournamentToMatch", fields: [tournamentId], references: [id], onDelete: Cascade)
  startedAt    DateTime
  endedAt      DateTime?
  deletedAt    DateTime?
  competitors  MatchesOnCompetitors[]
  gamesCount   Int                    @default(1)
  result       MatchResult?
  games        Game[]                 @relation("MatchToGame")
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt @db.DateTime()

  @@index([tournamentId])
}

model Game {
  id        Int         @id @default(autoincrement())
  startedAt DateTime
  endedAt   DateTime?
  deletedAt DateTime?
  resultId  String?
  matchId   Int
  match     Match       @relation("MatchToGame", fields: [matchId], references: [id], onDelete: Cascade)
  result    GameResult? @relation("GameToResult")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt @db.DateTime()

  ufcLiveStats UfcLiveStat[] @relation("GameToUfcLiveStat")

  @@index([matchId])
}

model MatchesOnCompetitors {
  match        Match      @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId      Int
  competitor   Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  competitorId Int

  @@id([matchId, competitorId])
  @@index([competitorId])
  @@index([matchId])
  @@map("matches_competitors")
}

model MatchResult {
  id        String     @id @default(cuid())
  match     Match      @relation(fields: [matchId], references: [id])
  matchId   Int        @unique
  winner    Competitor @relation("WinnerToMatchResult", fields: [winnerId], references: [id])
  winnerId  Int
  loser     Competitor @relation("LoserToMatchResult", fields: [loserId], references: [id])
  loserId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt @db.DateTime()

  @@index([winnerId])
  @@index([loserId])
  @@index([matchId])
  @@map("match_result")
}

model GameResult {
  id           Int         @id @default(autoincrement())
  game         Game        @relation("GameToResult", fields: [gameId], references: [id])
  gameId       Int         @unique
  winner       Competitor  @relation("WinnerToGameResult", fields: [winnerId], references: [id])
  winnerId     Int
  loser        Competitor  @relation("LoserToGameResult", fields: [loserId], references: [id])
  loserId      Int
  Competitor   Competitor? @relation(fields: [competitorId], references: [id])
  competitorId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt @db.DateTime()

  ufcResultData UfcResult? @relation("ResultToUfcResult")

  @@index([winnerId])
  @@index([loserId])
  @@index([gameId])
  @@index([competitorId])
  @@map("game_result")
}

model UfcResult {
  id        Int        @id @default(autoincrement())
  winMethod String
  resultId  Int        @unique
  result    GameResult @relation("ResultToUfcResult", fields: [resultId], references: [id])

  @@index([resultId])
}

// model UfcLiveStat {
//   id        Int    @id @default(autoincrement())
//   winMethod String
//   gameId    Int    @unique
//   game      Game   @relation("GameToUfcLiveStat", fields: [gameId], references: [id])
//
//   @@index([gameId])
// }
