// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  surname       String?
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(SUPER_ADMIN)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CompetitorStatus {
  ACTIVE
  ARCHIVED
}

model Competitor {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  nickname   String
  name       String
  surname    String
  status     CompetitorStatus @default(ACTIVE)
  image      String?
  country    String?
  birthDate  DateTime?
  archivedAt DateTime?
  createdAt  DateTime?        @default(now())
  updatedAt  DateTime?        @updatedAt
}

model Discipline {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  tournaments Tournament[] @relation("DisciplineToTournament")
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
}

enum TournamentStatus {
  UPCOMING
  ONGOING
  FINISHED
}

model Tournament {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  name         String           @unique
  disciplineId String           @db.ObjectId
  discipline   Discipline       @relation("DisciplineToTournament", fields: [disciplineId], references: [id])
  matches      Match[]          @relation("TournamentToMatch")
  testProp     Int
  status       TournamentStatus @default(UPCOMING)
  startedAt    DateTime
  endedAt      DateTime?
  deletedAt    DateTime?
  createdAt    DateTime?        @default(now())
  updatedAt    DateTime?        @updatedAt

  @@index([disciplineId])
}

enum MatchStatus {
  UPCOMING
  ONGOING
  FINISHED
}

type MatchResultType {
  winnerId String @db.ObjectId
  loserId  String @db.ObjectId
}

type GameResultType {
  winnerId String @db.ObjectId
  loserId  String @db.ObjectId
}

type GameType {
  startedAt DateTime
  endedAt   DateTime?
  deletedAt DateTime?
  result    GameResultType?
}

model Match {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  status         MatchStatus      @default(UPCOMING)
  tournamentId   String           @db.ObjectId
  tournament     Tournament       @relation("TournamentToMatch", fields: [tournamentId], references: [id], onDelete: Cascade)
  competitorsIds String[]         @db.ObjectId
  gamesCount     Int              @default(1)
  games          GameType[]
  result         MatchResultType?
  startedAt      DateTime
  endedAt        DateTime?
  deletedAt      DateTime?
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt

  @@index([tournamentId])
}
